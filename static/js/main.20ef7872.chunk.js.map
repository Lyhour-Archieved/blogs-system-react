{"version":3,"sources":["services/index.route.ts","components/CTextField/custome-textfield.tsx","services/login.service.ts","router/path.ts","page/login.page.tsx","constant/app.constant.ts","components/Center.tsx","page/home.page.tsx","page/dashboard.tsx","router/index.tsx","app/App.tsx","others/reportWebVitals.ts","index.tsx"],"names":["ROUTE_API","CustomTextField","props","style","padding","TextField","size","id","width","label","PATH_ENUM","useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","LoginPage","classes","route","useHistory","LoginCard","Card","className","CardContent","Typography","variant","component","initialValues","email","password","onSubmit","values","data","setSubmitting","console","log","axios","post","LOGIN","then","res","push","DASHBOARD","catch","err","finally","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","type","name","onChange","onBlur","value","CardActions","Button","color","disabled","justifyContent","minHeight","alignItems","CenterLayout","moreStyle","children","HomePage","flexDirection","to","DashboardPage","routeList","path","exact","HOME","RouteView","map","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20ef7872.chunk.js","sourcesContent":["export enum ROUTE_API {\n  \"LOGIN\" = \"/user/login\",\n}\n","import { FC, Fragment } from \"react\";\nimport { FilledTextFieldProps, TextField } from \"@material-ui/core\";\n\nexport interface CustomTextFieldProps extends FilledTextFieldProps {}\n\nexport const CustomTextField: FC<CustomTextFieldProps> = (props) => {\n  return (\n    <div style={{ padding: 3 }}>\n      <TextField\n        size=\"small\"\n        id=\"outlined-basic\"\n        style={{ width: \"100%\" }}\n        {...props}\n        label={props.label}\n      />\n    </div>\n  );\n};\n","import axios from \"axios\";\nimport { BASE_API_ROUTE } from \"../constant/app.constant\";\nimport { ROUTE_API } from \"./index.route\";\n\ntype Login = {\n  email: string;\n  password: string;\n};\n\nexport const loginService = (data: Login) => {\n  return axios.post(`${BASE_API_ROUTE}${ROUTE_API.LOGIN}`, data);\n};\n","export enum PATH_ENUM {\n  LOGIN = \"/login\",\n  HOME = \"/\",\n  DASHBOARD = \"/dashboard\",\n}\n","import { Fragment } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { TextField } from \"@material-ui/core\";\nimport { CustomTextField } from \"../components/CTextField/custome-textfield\";\nimport { Formik } from \"formik\";\nimport { loginService } from \"../services/login.service\";\nimport { useHistory } from \"react-router-dom\";\nimport { PATH_ENUM } from \"../router/path\";\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nconst LoginPage = () => {\n  const classes = useStyles();\n  const route = useHistory();\n  const LoginCard = (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography variant=\"h5\" component=\"h2\">\n          Login\n        </Typography>\n      </CardContent>\n      <CardContent>\n        <Formik\n          initialValues={{ email: \"\", password: \"\" }}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"value\", values);\n            loginService(values)\n              .then((res) => {\n                console.log(res);\n                route.push(PATH_ENUM.DASHBOARD);\n              })\n              .catch((err) => console.log(err))\n              .finally(() => {\n                setSubmitting(false);\n              });\n          }}\n        >\n          {({\n            values,\n            errors,\n            touched,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n            isSubmitting,\n            /* and other goodies */\n          }) => (\n            <form onSubmit={handleSubmit}>\n              <CustomTextField\n                label=\"Username\"\n                type=\"email\"\n                name=\"email\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.email}\n                variant=\"filled\"\n              />\n              <br />\n              <CustomTextField\n                label=\"Password\"\n                type=\"password\"\n                name=\"password\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.password}\n                variant=\"filled\"\n              />\n              {errors.password && touched.password && errors.password}\n\n              <CardActions>\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"small\"\n                  disabled={isSubmitting}\n                >\n                  Login\n                </Button>\n              </CardActions>\n            </form>\n          )}\n        </Formik>\n      </CardContent>\n    </Card>\n  );\n  return (\n    <Fragment>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          minHeight: \"100vh\",\n          alignItems: \"center\",\n        }}\n      >\n        {LoginCard}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default LoginPage;\n","export const BASE_API_ROUTE = \"https://nest-api-starter.asurraa.com\";\n","import { FC, Fragment } from \"react\";\n\nexport interface CenterLayoutProps\n  extends React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  > {\n  moreStyle?: React.CSSProperties;\n}\n\nexport const CenterLayout: FC<CenterLayoutProps> = (props) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        minHeight: \"100vh\",\n        ...props.moreStyle,\n      }}\n      {...props}\n    >\n      {props.children}\n    </div>\n  );\n};\n","import { Fragment } from \"react\";\nimport Lottie from \"react-lottie\";\nimport { Link } from \"react-router-dom\";\nimport * as animation from \"../assets/animations/system.json\";\nimport { CenterLayout } from \"../components/Center\";\nimport { PATH_ENUM } from \"../router/path\";\nimport { Button } from \"@material-ui/core\";\n\nconst HomePage = () => {\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animation,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  return (\n    <Fragment>\n      <CenterLayout moreStyle={{ flexDirection: \"column\" }}>\n        <h2>Welcome to my News System!</h2>\n\n        <Link to={PATH_ENUM.LOGIN}>\n          <Button color=\"primary\" variant=\"contained\">\n            Login Now\n          </Button>\n        </Link>\n      </CenterLayout>\n    </Fragment>\n  );\n};\n\nexport default HomePage;\n","import { Fragment } from \"react\";\n\nconst DashboardPage = () => {\n  return <Fragment>dashboatd</Fragment>;\n};\n\nexport default DashboardPage;\n","import { Fragment } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  RouteProps,\n} from \"react-router-dom\";\nimport LoginPage from \"../page/login.page\";\nimport HomePage from \"../page/home.page\";\nimport DashboardPage from \"../page/dashboard\";\nimport { PATH_ENUM } from \"./path\";\n\nconst routeList: RouteProps[] = [\n  { children: <LoginPage />, path: PATH_ENUM.LOGIN, exact: true },\n  { children: <HomePage />, path: PATH_ENUM.HOME, exact: true },\n  { children: <DashboardPage />, path: PATH_ENUM.DASHBOARD, exact: true },\n];\n\nexport const RouteView = () => {\n  return (\n    <Fragment>\n      <Router>\n        <Switch>\n          {routeList.map((data) => {\n            return (\n              <Route\n                children={data.children}\n                path={data.path}\n                exact={data.exact}\n              />\n            );\n          })}\n        </Switch>\n      </Router>\n    </Fragment>\n  );\n};\n","import { Button } from \"@material-ui/core\";\nimport React from \"react\";\nimport logo from \"../assets/logo.svg\";\nimport { RouteView } from \"../router\";\nimport \"../styles/App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <RouteView />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app/App\";\nimport \"./styles/index.css\";\nimport reportWebVitals from \"./others/reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}